"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var os = require("os");
var fs = require("fs-extra");
var cuid = require("scuid");
var findUp = require("find-up");
var debug = require('debug')('config');
var Config = (function () {
    function Config(options) {
        this.debug = Boolean(process.env.DEBUG && process.env.DEBUG.includes('*'));
        this.windows = false;
        this.bin = 'graphcool-framework';
        this.mock = true;
        this.argv = process.argv.slice(1);
        this.commandsDir = path.join(__dirname, '../dist/commands');
        this.defaultCommand = 'help';
        this.userPlugins = false;
        this.version = '1.3.11';
        this.name = 'graphcool-framework';
        this.pjson = {
            name: 'cli-engine',
            version: '0.0.0',
            dependencies: {},
            'cli-engine': {
                defaultCommand: 'help',
            },
        };
        this.sharedClusters = [
            'shared-eu-west-1',
            'shared-ap-northeast-1',
            'shared-us-west-2',
        ];
        this.root = path.join(__dirname, '..');
        this.warnings = [];
        /**
         * Urls
         */
        this.authUIEndpoint = process.env.ENV === 'DEV'
            ? 'https://dev.console.graph.cool/cli/auth'
            : 'https://console.graph.cool/cli/auth';
        this.backendAddr = process.env.ENV === 'DEV'
            ? 'https://dev.api.graph.cool'
            : 'https://api.graph.cool';
        this.systemAPIEndpoint = process.env.ENV === 'DEV'
            ? 'https://dev.api.graph.cool/system'
            : 'https://api.graph.cool/system';
        this.authEndpoint = process.env.ENV === 'DEV'
            ? 'https://cli-auth-api.graph.cool/dev'
            : 'https://cli-auth-api.graph.cool/prod';
        this.docsEndpoint = process.env.ENV === 'DEV'
            ? 'https://dev.graph.cool/docs'
            : 'https://www.graph.cool/docs';
        this.statusEndpoint = 'https://crm.graph.cool/prod/status';
        /**
         * consumer endpoints
         */
        this.simpleAPIEndpoint = process.env.ENV === 'DEV'
            ? 'https://dev.api.graph.cool/simple/v1/'
            : 'https://api.graph.cool/simple/v1/';
        this.relayAPIEndpoint = process.env.ENV === 'DEV'
            ? 'https://dev.api.graph.cool/relay/v1/'
            : 'https://api.graph.cool/relay/v1/';
        this.fileAPIEndpoint = process.env.ENV === 'DEV'
            ? 'https://dev.api.graph.cool/file/v1/'
            : 'https://api.graph.cool/file/v1/';
        this.subscriptionsEndpoint = process.env.ENV === 'DEV'
            ? 'wss://dev.subscriptions.graph.cool'
            : 'wss://subscriptions.graph.cool';
        /* tslint:disable-next-line */
        this.__cache = {};
        this.cwd = (options && options.cwd) || this.getCwd();
        this.home = (options && options.home) || this.getHome();
        debug("CWD", this.cwd);
        debug("HOME", this.home);
        this.setDefinitionPaths();
        this.setRCPaths();
        if (options) {
            this.readPackageJson(options);
        }
    }
    Config.prototype.setLocal = function (host) {
        if (host === void 0) { host = 'http://localhost:60000'; }
        this.backendAddr = host;
        this.systemAPIEndpoint = host + '/system';
    };
    Config.prototype.setOutput = function (out) {
        this.out = out;
        this.warnings.forEach(function (warning) { return out.warn(warning); });
        this.warnings = [];
    };
    Object.defineProperty(Config.prototype, "arch", {
        get: function () {
            return os.arch() === 'ia32' ? 'x86' : os.arch();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "platform", {
        get: function () {
            return os.platform() === 'win32' ? 'windows' : os.platform();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "userAgent", {
        get: function () {
            return this.name + "/" + this.version + " (" + this.platform + "-" + this.arch + ") node-" + process.version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "dirname", {
        get: function () {
            return this.pjson['cli-engine'].dirname || this.bin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "cacheDir", {
        get: function () {
            var x = dir(this, 'cache', this.platform === 'darwin'
                ? path.join(this.home, 'Library', 'Caches')
                : null);
            return x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "requireCachePath", {
        get: function () {
            return path.join(this.cacheDir, '/.require-cache.json');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "requestsCachePath", {
        get: function () {
            return path.join(this.cacheDir, '/.requests.json');
        },
        enumerable: true,
        configurable: true
    });
    Config.prototype.readPackageJson = function (options) {
        this.mock = options.mock;
        this.argv = options.argv || this.argv;
        if (options.root) {
            this.root = options.root;
            var pjsonPath = path.join(options.root, 'package.json');
            var pjson = fs.readJSONSync(pjsonPath);
            if (pjson && pjson['cli-engine']) {
                this.pjson = pjson;
                this.version = pjson.version;
            }
        }
    };
    Config.prototype.setRCPaths = function () {
        this.localRCPath = path.join(this.definitionDir, '.graphcoolrc');
        var homePath = path.join(this.home, '.graphcoolrc');
        debug("homepath", homePath);
        this.globalRCPath = homePath;
        debug("localRCPath", this.localRCPath);
        debug("globalRCPath", this.globalRCPath);
    };
    Config.prototype.warn = function (msg) {
        this.warnings.push(msg);
    };
    Config.prototype.setDefinitionPaths = function () {
        var definitionPath = path.join(this.cwd, 'graphcool.yml');
        if (fs.pathExistsSync(definitionPath)) {
            this.definitionDir = this.cwd;
            this.definitionPath = definitionPath;
        }
        else {
            var found = findUp.sync('graphcool.yml', { cwd: this.cwd });
            this.definitionDir = found ? path.dirname(found) : this.cwd;
            this.definitionPath = found || null;
        }
        debug("definitionDir", this.definitionDir);
        debug("definitionPath", this.definitionPath);
    };
    Config.prototype.getCwd = function () {
        // get cwd
        var cwd = process.cwd();
        if (process.env.NODE_ENV === 'test') {
            cwd = path.join(os.tmpdir(), cuid() + "/");
            fs.mkdirpSync(cwd);
            debug('cwd', cwd);
        }
        return cwd;
    };
    Config.prototype.getHome = function () {
        // get home
        var home = os.homedir() || os.tmpdir();
        if (process.env.NODE_ENV === 'test') {
            home = path.join(os.tmpdir(), cuid() + "/");
            fs.mkdirpSync(home);
            debug('home', home);
        }
        return home;
    };
    return Config;
}());
exports.Config = Config;
function dir(config, category, d) {
    var cacheKey = "dir:" + category;
    var cache = config.__cache[cacheKey];
    if (cache) {
        return cache;
    }
    d =
        d ||
            path.join(config.home, category === 'data' ? '.local/share' : '.' + category);
    if (config.windows) {
        d = process.env.LOCALAPPDATA || d;
    }
    d = process.env.XDG_DATA_HOME || d;
    d = path.join(d, config.dirname);
    fs.mkdirpSync(d);
    config.__cache[cacheKey] = d;
    return d;
}
//# sourceMappingURL=Config.js.map