"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_request_1 = require("graphql-request");
var lodash_1 = require("lodash");
var ping_1 = require("./ping");
var ProjectDefinition_1 = require("../ProjectDefinition/ProjectDefinition");
var chalk_1 = require("chalk");
var debug = require('debug')('client');
var REMOTE_PROJECT_FRAGMENT = "\n  fragment RemoteProject on Project {\n    id\n    name\n    schema\n    alias\n    region\n    isEjected\n    projectDefinitionWithFileContent\n  }\n";
var Client = (function () {
    function Client(config, environment, out) {
        this.mocks = {};
        this.config = config;
        this.env = environment;
        this.out = out;
    }
    Client.prototype.setAuth = function (auth) {
        this.auth = auth;
    };
    Object.defineProperty(Client.prototype, "client", {
        // always create a new client which points to the latest config for each request
        get: function () {
            var _this = this;
            debug('choosing clusterEndpoint', this.env.clusterEndpoint);
            var localClient = new graphql_request_1.GraphQLClient(this.env.clusterEndpoint, {
                headers: {
                    Authorization: "Bearer " + this.env.token,
                },
            });
            return {
                request: function (query, variables) { return __awaiter(_this, void 0, void 0, function () {
                    var e_1, user, message;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                debug('Sending query');
                                debug(query);
                                debug(variables);
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 10]);
                                return [4 /*yield*/, localClient.request(query, variables)];
                            case 2: return [2 /*return*/, _a.sent()];
                            case 3:
                                e_1 = _a.sent();
                                if (!e_1.message.includes('No service with id')) return [3 /*break*/, 5];
                                return [4 /*yield*/, this.getAccount()];
                            case 4:
                                user = _a.sent();
                                message = e_1.response.errors[0].message;
                                this.out.error(message +
                                    (" in account " + user.email + ". Please check if you are logged in to the right account."));
                                return [3 /*break*/, 9];
                            case 5:
                                if (!e_1.message.startsWith('No valid session')) return [3 /*break*/, 8];
                                return [4 /*yield*/, this.auth.ensureAuth(true)
                                    // try again with new token
                                ];
                            case 6:
                                _a.sent();
                                return [4 /*yield*/, this.client.request(query, variables)];
                            case 7: 
                            // try again with new token
                            return [2 /*return*/, _a.sent()];
                            case 8:
                                if (e_1.message.includes('ECONNREFUSED') &&
                                    (e_1.message.includes('localhost') || e_1.message.includes('127.0.0.1'))) {
                                    this.out.error("Could not connect to local cluster. Please use " + chalk_1.default.bold.green('graphcool local up') + " to start your local Graphcool cluster.");
                                }
                                else {
                                    throw e_1;
                                }
                                _a.label = 9;
                            case 9: return [3 /*break*/, 10];
                            case 10: return [2 /*return*/];
                        }
                    });
                }); },
            };
        },
        enumerable: true,
        configurable: true
    });
    Client.prototype.getAccount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.request("{\n      viewer {\n        user {\n          email\n          name\n        }\n      }\n    }")];
                    case 1:
                        user = (_a.sent()).viewer.user;
                        return [2 /*return*/, user];
                }
            });
        });
    };
    Client.prototype.createProject = function (name, projectDefinition, alias, region) {
        return __awaiter(this, void 0, void 0, function () {
            var mutation, newRegion, _a, project;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mutation = "      mutation addProject($name: String!, $alias: String, $region: Region, $config: String) {\n        addProject(input: {\n          name: $name,\n          alias: $alias,\n          region: $region,\n          clientMutationId: \"static\"\n          config: $config\n        }) {\n          project {\n            ...RemoteProject\n          }\n        }\n      }\n      " + REMOTE_PROJECT_FRAGMENT + "\n      ";
                        _a = region;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, ping_1.getFastestRegion()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        newRegion = _a;
                        return [4 /*yield*/, this.client.request(mutation, {
                                name: name,
                                alias: alias,
                                region: newRegion,
                                config: JSON.stringify(ProjectDefinition_1.ProjectDefinitionClass.sanitizeDefinition(projectDefinition)),
                            })
                            // TODO set project definition, should be possibility in the addProject mutation
                        ];
                    case 3:
                        project = (_b.sent()).addProject.project;
                        // TODO set project definition, should be possibility in the addProject mutation
                        return [2 /*return*/, this.getProjectDefinition(project)];
                }
            });
        });
    };
    Client.prototype.getDeployUrl = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var mutation, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mutation = "\n      mutation getUrl($projectId: String!) {\n        getTemporaryDeployUrl(\n          input: {\n          projectId: $projectId\n        }\n      ) {\n          url\n        }\n      }\n    ";
                        return [4 /*yield*/, this.client.request(mutation, { projectId: projectId })];
                    case 1:
                        url = (_a.sent()).getTemporaryDeployUrl.url;
                        return [2 /*return*/, url];
                }
            });
        });
    };
    Client.prototype.push = function (projectId, force, isDryRun, config) {
        return __awaiter(this, void 0, void 0, function () {
            var mutation, sanitizedDefinition, push;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mutation = "      mutation($projectId: String!, $force: Boolean, $isDryRun: Boolean!, $config: String!) {\n        push(input: {\n          projectId: $projectId\n          force: $force\n          isDryRun: $isDryRun\n          config: $config\n          version: 1\n        }) {\n          migrationMessages {\n            type\n            action\n            name\n            description\n            subDescriptions {\n              type\n              action\n              name\n              description\n            }\n          }\n          errors {\n            description\n            type\n            field\n          }\n          project {\n            id\n            name\n            alias\n            projectDefinitionWithFileContent\n          }\n        }\n      }\n    ";
                        debug('\n\nSending service definition:');
                        sanitizedDefinition = ProjectDefinition_1.ProjectDefinitionClass.sanitizeDefinition(config);
                        debug(this.out.getStyledJSON(sanitizedDefinition));
                        return [4 /*yield*/, this.client.request(mutation, {
                                projectId: projectId,
                                force: force,
                                isDryRun: isDryRun,
                                config: JSON.stringify(sanitizedDefinition),
                            })];
                    case 1:
                        push = (_a.sent()).push;
                        debug();
                        return [2 /*return*/, {
                                migrationMessages: push.migrationMessages,
                                errors: push.errors,
                                newSchema: push.project.schema,
                                projectDefinition: this.getProjectDefinition(push.project)
                                    .projectDefinition,
                            }];
                }
            });
        });
    };
    Client.prototype.fetchProjects = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("\n      {\n        viewer {\n          user {\n            projects {\n              edges {\n                node {\n                  id\n                  name\n                  alias\n                  region\n                }\n              }\n            }\n          }\n        }\n      }")];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.viewer.user.projects.edges.map(function (edge) { return edge.node; })];
                }
            });
        });
    };
    Client.prototype.fetchProjectInfo = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var project;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("\n      query ($projectId: ID!){\n        viewer {\n          project(id: $projectId) {\n            ...RemoteProject\n          }\n        }\n      }\n      " + REMOTE_PROJECT_FRAGMENT + "\n      ", { projectId: projectId })];
                    case 1:
                        project = (_a.sent()).viewer.project;
                        return [2 /*return*/, this.getProjectDefinition(project)];
                }
            });
        });
    };
    Client.prototype.resetServiceData = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // dont send any auth information when running the authenticateCustomer mutation
                    return [4 /*yield*/, this.client.request("mutation ($id: String!) {\n          resetProjectData(input: {\n            projectId: $id\n          }) {\n            clientMutationId\n          }\n        }\n      ", { id: id })];
                    case 1:
                        // dont send any auth information when running the authenticateCustomer mutation
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype.waitForLocalDocker = function (endpoint) {
        return __awaiter(this, void 0, void 0, function () {
            var valid, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        valid = false;
                        _a.label = 1;
                    case 1:
                        if (!!valid) return [3 /*break*/, 7];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        debug('requesting', endpoint);
                        return [4 /*yield*/, graphql_request_1.request(endpoint, "\n            {\n              viewer {\n                id\n              }\n            }\n            ")];
                    case 3:
                        _a.sent();
                        valid = true;
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        valid = false;
                        return [3 /*break*/, 5];
                    case 5: return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 500); })];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype.authenticateCustomer = function (endpoint, token) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, graphql_request_1.request(endpoint, "\n      mutation ($token: String!) {\n        authenticateCustomer(input: {\n          auth0IdToken: $token\n        }) {\n          token\n          user {\n            id\n          }\n        }\n      }\n      ", { token: token })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.authenticateCustomer];
                }
            });
        });
    };
    Client.prototype.getPats = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var permanentAuthTokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("\n      query ($projectId: ID!){\n        viewer {\n          project(id: $projectId) {\n            permanentAuthTokens {\n              edges {\n                node {\n                  id\n                  name\n                  token\n                }\n              }\n            }\n          }\n        }\n      }\n      ", { projectId: projectId })];
                    case 1:
                        permanentAuthTokens = (_a.sent()).viewer.project.permanentAuthTokens;
                        if (!permanentAuthTokens) {
                            return [2 /*return*/, []];
                        }
                        return [2 /*return*/, permanentAuthTokens.edges.map(function (edge) { return edge.node; })];
                }
            });
        });
    };
    Client.prototype.getFunctions = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var functions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("\n      query ($projectId: ID!){\n        viewer {\n          project(id: $projectId) {\n            functions {\n              edges {\n                node {\n                  name\n                  id\n                  type\n                  stats {\n                    requestCount\n                    errorCount\n                  }\n                  __typename\n                }\n              }\n            }\n          }\n        }\n      }\n      ", { projectId: projectId })];
                    case 1:
                        functions = (_a.sent()).viewer.project.functions;
                        return [2 /*return*/, functions.edges.map(function (edge) { return edge.node; })];
                }
            });
        });
    };
    Client.prototype.getFunction = function (projectId, functionName) {
        return __awaiter(this, void 0, void 0, function () {
            var functions, normalizedFunctionName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFunctions(projectId)];
                    case 1:
                        functions = _a.sent();
                        normalizedFunctionName = normalizeName(functionName);
                        return [2 /*return*/, (functions.find(function (fn) { return normalizeName(fn.name) === normalizedFunctionName; }) ||
                                null)];
                }
            });
        });
    };
    Client.prototype.getFunctionLogs = function (functionId, count) {
        if (count === void 0) { count = 1000; }
        return __awaiter(this, void 0, void 0, function () {
            var node;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("query ($id: ID!, $count: Int!) {\n      node(id: $id) {\n        ... on Function {\n          logs(last: $count) {\n            pageInfo {\n              endCursor\n            }\n            edges {\n              node {\n                id\n                requestId\n                duration\n                status\n                timestamp\n                message\n              }\n            }\n          }\n        }\n      }\n    }", { id: functionId, count: count })];
                    case 1:
                        node = (_a.sent()).node;
                        return [2 /*return*/, node && node.logs ? node.logs.edges.map(function (edge) { return edge.node; }) : null];
                }
            });
        });
    };
    Client.prototype.getAllFunctionLogs = function (projectId, count) {
        if (count === void 0) { count = 1000; }
        return __awaiter(this, void 0, void 0, function () {
            var project;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("\n        query ($id: ID!, $count: Int!) {\n          viewer {\n            project(id: $id) {\n              functions {\n                edges {\n                  node {\n                    logs(last: $count) {\n                      edges {\n                        node {\n                          id\n                          requestId\n                          duration\n                          status\n                          timestamp\n                          message\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ", { id: projectId, count: count })];
                    case 1:
                        project = (_a.sent()).viewer.project;
                        return [2 /*return*/, project && project.functions && project.functions.edges
                                ? lodash_1.flatMap(project.functions.edges.map(function (functionEdge) {
                                    return functionEdge.node.logs.edges.map(function (logEdge) { return logEdge.node; });
                                }))
                                : null];
                }
            });
        });
    };
    Client.prototype.getProjectName = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var project;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("\n      query ($projectId: ID!){\n        viewer {\n          project(id: $projectId) {\n            name\n          }\n        }\n      }\n      ", { projectId: projectId })];
                    case 1:
                        project = (_a.sent()).viewer.project;
                        return [2 /*return*/, project.name];
                }
            });
        });
    };
    Client.prototype.deleteProjects = function (projectIds) {
        return __awaiter(this, void 0, void 0, function () {
            var inputArguments, singleMutations, header, body, mutation, variables, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inputArguments = projectIds.reduce(function (prev, current, index) {
                            return prev + "$projectId" + index + ": String!" + (index < projectIds.length - 1 ? ', ' : '');
                        }, '');
                        singleMutations = projectIds.map(function (projectId, index) { return "\n      " + projectId + ": deleteProject(input:{\n          projectId: $projectId" + index + ",\n          clientMutationId: \"asd\"\n        }) {\n          deletedId\n      }"; });
                        header = "mutation (" + inputArguments + ") ";
                        body = singleMutations.join('\n');
                        mutation = header + " { \n" + body + " \n}";
                        variables = projectIds.reduce(function (prev, current, index) {
                            prev["projectId" + index] = current;
                            return prev;
                        }, {});
                        return [4 /*yield*/, this.client.request(mutation, variables)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, Object.keys(result).map(function (projectId) { return result[projectId].deletedId; })];
                }
            });
        });
    };
    Client.prototype.exportProjectData = function (projectId) {
        return __awaiter(this, void 0, void 0, function () {
            var exportData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("\n      mutation ($projectId: String!){\n        exportData(input:{\n          projectId: $projectId,\n          clientMutationId: \"asd\"\n        }) {\n          url\n        }\n      }\n    ", { projectId: projectId })];
                    case 1:
                        exportData = (_a.sent()).exportData;
                        return [2 /*return*/, exportData.url];
                }
            });
        });
    };
    Client.prototype.cloneProject = function (variables) {
        return __awaiter(this, void 0, void 0, function () {
            var project;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/, this.client.request("\n      mutation ($projectId: String!, $name: String!, $includeMutationCallbacks: Boolean!, $includeData: Boolean!){\n        cloneProject(input:{\n          name: $name,\n          projectId: $projectId,\n          includeData: $includeData,\n          includeMutationCallbacks: $includeMutationCallbacks,\n          clientMutationId: \"asd\"\n        }) {\n          project {\n            ...RemoteProject\n          }\n        }\n      }\n      " + REMOTE_PROJECT_FRAGMENT + "\n    ")];
                    case 1:
                        project = (_a.sent()).project;
                        return [2 /*return*/, this.getProjectDefinition(project)];
                }
            });
        });
    };
    Client.prototype.checkStatus = function (instruction) {
        return __awaiter(this, void 0, void 0, function () {
            var e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fetch(this.config.statusEndpoint, {
                                method: 'post',
                                headers: {
                                    Authorization: "Bearer " + this.env.token,
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(instruction),
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_3 = _a.sent();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype.download = function (projectId, exportData) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, result, text;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = this.env.exportEndpoint(projectId);
                        return [4 /*yield*/, fetch(endpoint, {
                                method: 'post',
                                headers: {
                                    Authorization: "Bearer " + this.env.token,
                                    'Content-Type': 'application/json',
                                },
                                body: exportData,
                            })];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, result.text()];
                    case 2:
                        text = _a.sent();
                        try {
                            return [2 /*return*/, JSON.parse(text)];
                        }
                        catch (e) {
                            throw new Error(text);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype.upload = function (projectId, importData) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, result, text;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = this.env.importEndpoint(projectId);
                        return [4 /*yield*/, fetch(endpoint, {
                                method: 'post',
                                headers: {
                                    Authorization: "Bearer " + this.env.token,
                                    'Content-Type': 'application/json',
                                },
                                body: importData,
                            })];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, result.text()];
                    case 2:
                        text = _a.sent();
                        try {
                            return [2 /*return*/, JSON.parse(text)];
                        }
                        catch (e) {
                            throw new Error(text);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype.getProjectDefinition = function (project) {
        return __assign({}, lodash_1.omit(project, 'projectDefinitionWithFileContent'), { projectDefinition: JSON.parse(project.projectDefinitionWithFileContent) });
    };
    return Client;
}());
exports.Client = Client;
// only make this available in test mode
// if (process.env.NODE_ENV === 'test') {
//   Client.prototype.mock = function({ request, response }) {
//     if (!this.mocks) {
//       this.mocks = {}
//     }
//     this.mocks[JSON.stringify(request, null, 2)] = response
//   }
// }
function normalizeName(name) {
    return name.toLowerCase().trim();
}
//# sourceMappingURL=Client.js.map