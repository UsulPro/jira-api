import { AccountInfo, AuthenticateCustomerPayload, FunctionInfo, FunctionLog, MigrationResult, PAT, Project, ProjectDefinition, ProjectInfo } from '../types/common';
import { GraphQLClient } from 'graphql-request';
import { Config } from '../Config';
import { Environment } from '../Environment';
import { Output } from '../index';
import { Auth } from '../Auth';
export declare class Client {
    config: Config;
    env: Environment;
    out: Output;
    auth: Auth;
    mock: (input: {
        request: any;
        response: any;
    }) => void;
    private mocks;
    private tokenCache;
    constructor(config: Config, environment: Environment, out: Output);
    setAuth(auth: Auth): void;
    readonly client: GraphQLClient;
    getAccount(): Promise<AccountInfo>;
    createProject(name: string, projectDefinition: ProjectDefinition, alias?: string, region?: string): Promise<ProjectInfo>;
    getDeployUrl(projectId: string): Promise<string>;
    push(projectId: string, force: boolean, isDryRun: boolean, config: ProjectDefinition): Promise<MigrationResult>;
    fetchProjects(): Promise<Project[]>;
    fetchProjectInfo(projectId: string): Promise<ProjectInfo>;
    resetServiceData(id: string): Promise<void>;
    waitForLocalDocker(endpoint: string): Promise<void>;
    authenticateCustomer(endpoint: string, token: string): Promise<AuthenticateCustomerPayload>;
    getPats(projectId: string): Promise<PAT[]>;
    getFunctions(projectId: string): Promise<FunctionInfo[]>;
    getFunction(projectId: string, functionName: string): Promise<FunctionInfo | null>;
    getFunctionLogs(functionId: string, count?: number): Promise<FunctionLog[] | null>;
    getAllFunctionLogs(projectId: string, count?: number): Promise<FunctionLog[] | null>;
    getProjectName(projectId: string): Promise<string>;
    deleteProjects(projectIds: string[]): Promise<string[]>;
    exportProjectData(projectId: string): Promise<string>;
    cloneProject(variables: {
        projectId: string;
        name: string;
        includeMutationCallbacks: boolean;
        includeData: boolean;
    }): Promise<ProjectInfo>;
    checkStatus(instruction: any): Promise<any>;
    download(projectId: string, exportData: any): Promise<any>;
    upload(projectId: string, importData: any): Promise<any>;
    private getProjectDefinition(project);
}
